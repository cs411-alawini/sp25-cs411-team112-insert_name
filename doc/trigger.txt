The following are our triggers we used for this application:

async function createTriggers() {
  const connection = await pool.getConnection();
  try {
    await connection.query(`DROP TRIGGER IF EXISTS after_order_insert`);
    await connection.query(`DROP TRIGGER IF EXISTS after_order_update`);
    await connection.query(`DROP TRIGGER IF EXISTS after_order_delete`);
    
    const [tables] = await connection.query(`
      SHOW TABLES LIKE 'Users'
    `);
    
    if (tables.length === 0) {
      await connection.query(`
        CREATE TABLE Users (
          User_ID INT PRIMARY KEY,
          Username VARCHAR(50) NOT NULL,
          Email VARCHAR(100) NOT NULL,
          Password VARCHAR(100) NOT NULL,
          Total_Emissions DECIMAL(10,2) DEFAULT 0,
          Monthly_Emissions DECIMAL(10,2) DEFAULT 0
        )
      `);
      console.log('Created Users table');
    } else {
      const [userColumns] = await connection.query(`
        SHOW COLUMNS FROM Users
      `);
      
      const hasEmissionsField = userColumns.some(col => col.Field === 'Total_Emissions');
      const hasMonthlyField = userColumns.some(col => col.Field === 'Monthly_Emissions');
      
      if (!hasEmissionsField) {
        await connection.query(`
          ALTER TABLE Users ADD COLUMN Total_Emissions DECIMAL(10,2) DEFAULT 0
        `);
        console.log('Added Total_Emissions column to Users table');
      }
      
      if (!hasMonthlyField) {
        await connection.query(`
          ALTER TABLE Users ADD COLUMN Monthly_Emissions DECIMAL(10,2) DEFAULT 0
        `);
        console.log('Added Monthly_Emissions column to Users table');
      }
    }
    
    await connection.query(`
      CREATE TRIGGER after_order_insert
      AFTER INSERT ON Orders
      FOR EACH ROW
      BEGIN
        DECLARE emission_factor DECIMAL(10,2);
        DECLARE order_emissions DECIMAL(10,2);
        
        SELECT i.Emissions INTO emission_factor
        FROM Category c
        JOIN Industries i ON c.NAICS_Code = i.NAICS_Code
        WHERE c.Category_ID = NEW.Category_ID;
        
        IF emission_factor IS NOT NULL THEN
          SET order_emissions = (NEW.Total * emission_factor / 100);
          
          UPDATE Users
          SET 
            Total_Emissions = IFNULL(Total_Emissions, 0) + order_emissions
          WHERE User_ID = NEW.Customer_ID;
          
          IF YEAR(NEW.Order_Date) = YEAR(CURRENT_DATE()) AND MONTH(NEW.Order_Date) = MONTH(CURRENT_DATE()) THEN
            UPDATE Users
            SET Monthly_Emissions = IFNULL(Monthly_Emissions, 0) + order_emissions
            WHERE User_ID = NEW.Customer_ID;
          END IF;
        END IF;
      END
    `);
    
    await connection.query(`
      CREATE TRIGGER after_order_update
      AFTER UPDATE ON Orders
      FOR EACH ROW
      BEGIN
        DECLARE old_emission_factor DECIMAL(10,2);
        DECLARE new_emission_factor DECIMAL(10,2);
        DECLARE old_emissions DECIMAL(10,2);
        DECLARE new_emissions DECIMAL(10,2);
        
        SELECT i.Emissions INTO old_emission_factor
        FROM Category c
        JOIN Industries i ON c.NAICS_Code = i.NAICS_Code
        WHERE c.Category_ID = OLD.Category_ID;
        
        SELECT i.Emissions INTO new_emission_factor
        FROM Category c
        JOIN Industries i ON c.NAICS_Code = i.NAICS_Code
        WHERE c.Category_ID = NEW.Category_ID;
        
        IF old_emission_factor IS NOT NULL THEN
          SET old_emissions = (OLD.Total * old_emission_factor / 100);
        ELSE
          SET old_emissions = 0;
        END IF;
        
        IF new_emission_factor IS NOT NULL THEN
          SET new_emissions = (NEW.Total * new_emission_factor / 100);
        ELSE
          SET new_emissions = 0;
        END IF;
        
        UPDATE Users
        SET Total_Emissions = GREATEST(0, IFNULL(Total_Emissions, 0) - old_emissions + new_emissions)
        WHERE User_ID = NEW.Customer_ID;
        
        IF YEAR(OLD.Order_Date) = YEAR(CURRENT_DATE()) AND MONTH(OLD.Order_Date) = MONTH(CURRENT_DATE()) THEN
          UPDATE Users
          SET Monthly_Emissions = GREATEST(0, IFNULL(Monthly_Emissions, 0) - old_emissions)
          WHERE User_ID = NEW.Customer_ID;
        END IF;
        
        IF YEAR(NEW.Order_Date) = YEAR(CURRENT_DATE()) AND MONTH(NEW.Order_Date) = MONTH(CURRENT_DATE()) THEN
          UPDATE Users
          SET Monthly_Emissions = IFNULL(Monthly_Emissions, 0) + new_emissions
          WHERE User_ID = NEW.Customer_ID;
        END IF;
      END
    `);
    
    await connection.query(`
      CREATE TRIGGER after_order_delete
      AFTER DELETE ON Orders
      FOR EACH ROW
      BEGIN
        DECLARE emission_factor DECIMAL(10,2);
        DECLARE order_emissions DECIMAL(10,2);
        
        SELECT i.Emissions INTO emission_factor
        FROM Category c
        JOIN Industries i ON c.NAICS_Code = i.NAICS_Code
        WHERE c.Category_ID = OLD.Category_ID;
        
        IF emission_factor IS NOT NULL THEN
          SET order_emissions = (OLD.Total * emission_factor / 100);
          
          UPDATE Users
          SET 
            Total_Emissions = GREATEST(0, IFNULL(Total_Emissions, 0) - order_emissions)
          WHERE User_ID = OLD.Customer_ID;
          
          IF YEAR(OLD.Order_Date) = YEAR(CURRENT_DATE()) AND MONTH(OLD.Order_Date) = MONTH(CURRENT_DATE()) THEN
            UPDATE Users
            SET Monthly_Emissions = GREATEST(0, IFNULL(Monthly_Emissions, 0) - order_emissions)
            WHERE User_ID = OLD.Customer_ID;
          END IF;
        END IF;
      END
    `);
    
    console.log('Database triggers created successfully');
  } catch (err) {
    console.error('Error creating database triggers:', err);
  } finally {
    connection.release();
  }
}
